local checks = require 'ldk.checks'

describe("ldk.checks", function()

  local function blame(f)
    local code = [[
      local function f(_)                     -- 1
        checks.%s                             -- 2
      end                                     -- 3
      local function g()                      -- 4
        f()                                   -- 5
      end                                     -- 6
      local _, err = pcall(function()         -- 7
        g()                                   -- 8
      end)                                    -- 10
      return err                              -- 11
    ]]
    return (load(code:format(f), 'caller', 'table', {checks = checks, pcall = pcall}))()
  end

  describe("#argerror", function()
    describe("bad arguments", function()
      local function f(...)
        local args = table.pack(...)
        return function()
          checks.argerror(table.unpack(args))
        end
      end
      it("diagnoses bad argument #1", function()
        assert.error(f(), "bad argument #1 to 'argerror' (number expected, got no value)")
        assert.error(f('not a number'), "bad argument #1 to 'argerror' (number expected, got string)")
        assert.error(f(1.337), "bad argument #1 to 'argerror' (number has no integer representation)")
      end)
      it("diagnoses bad argument #2", function()
        assert.error(f(1, {}), "bad argument #2 to 'argerror' (string expected, got table)")
        assert.error(f(1, false), "bad argument #2 to 'argerror' (string expected, got boolean)")
      end)
    end)
    describe("raising errors", function()
      local function f(arg, message)
        return function()
          checks.argerror(arg, message)
        end
      end
        it("raises an argument error", function()
        assert.error(f(1), "bad argument #1 to '?'")
      end)
      it("raises an argument error with an optional message", function()
        assert.error(f(1, "message"), "bad argument #1 to '?' (message)")
      end)
    end)
    describe("blame site", function()
      it("blames the call site", function()
        assert.matches(":5: bad argument", blame('argerror(1)'))
      end)
    end)
  end)

  describe("#checktype", function()
    local function f0(arg, tag)
      local function f()
        checks.checktype(arg, tag)
      end
      return function()
        f()
      end
    end
    local function f1(arg, tag, x)
      local function f(_)
        checks.checktype(arg, tag)
      end
      return function()
        f(x)
      end
    end
    describe("bad arguments", function()
      it("diagnoses missing argument #1", function()
        assert.error(function()
            checks.checktype()
        end, "bad argument #1 to 'checktype' (number expected, got no value)")
      end)
      it("diagnoses missing argument #2", function()
        assert.error(function()
          checks.checktype(1)
        end, "bad argument #2 to 'checktype' (string expected, got no value)")
      end)
      it("diagnoses bad argument #1", function()
        assert.error(f0(nil, 'string'), "bad argument #1 to 'checktype' (number expected, got nil)")
        assert.error(f0('string', 'string'), "bad argument #1 to 'checktype' (number expected, got string)")
        assert.error(f0(1, 'string'), "bad argument #1 to 'checktype' (invalid argument index)")
      end)
      it("diagnoses bad argument #2", function()
        assert.error(f0(1), "bad argument #2 to 'checktype' (string expected, got nil)")
        assert.error(f0(1, {1337}), "bad argument #2 to 'checktype' (string expected, got table)")
      end)
    end)
    describe("with primitive types", function()
      it("reports missing arguments", function()
        assert.error(f1(1, 'boolean', nil), "bad argument #1 to 'f' (boolean expected, got nil)")
        assert.error(f1(1, 'thread', nil), "bad argument #1 to 'f' (thread expected, got nil)")
        assert.error(f1(1, 'function', nil), "bad argument #1 to 'f' (function expected, got nil)")
        assert.error(f1(1, 'file', nil), "bad argument #1 to 'f' (file expected, got nil)")
        assert.error(f1(1, 'integer', nil), "bad argument #1 to 'f' (integer expected, got nil)")
        assert.error(f1(1, 'number', nil), "bad argument #1 to 'f' (number expected, got nil)")
        assert.error(f1(1, 'string', nil), "bad argument #1 to 'f' (string expected, got nil)")
        assert.error(f1(1, 'table', nil), "bad argument #1 to 'f' (table expected, got nil)")
        assert.error(f1(1, 'userdata', nil), "bad argument #1 to 'f' (userdata expected, got nil)")
      end)
      it("reports mismatched types", function()
        assert.error(f1(1, 'boolean', {1337}), "bad argument #1 to 'f' (boolean expected, got table)")
        assert.error(f1(1, 'thread', {1337}), "bad argument #1 to 'f' (thread expected, got table)")
        assert.error(f1(1, 'function', {1337}), "bad argument #1 to 'f' (function expected, got table)")
        assert.error(f1(1, 'file', {1337}), "bad argument #1 to 'f' (file expected, got table)")
        assert.error(f1(1, 'integer', {1337}), "bad argument #1 to 'f' (integer expected, got table)")
        assert.error(f1(1, 'number', {1337}), "bad argument #1 to 'f' (number expected, got table)")
        assert.error(f1(1, 'string', {1337}), "bad argument #1 to 'f' (string expected, got table)")
        assert.error(f1(1, 'table', '1337'), "bad argument #1 to 'f' (table expected, got string)")
        assert.error(f1(1, 'userdata', {1337}), "bad argument #1 to 'f' (userdata expected, got table)")
      end)
      it("matches types", function()
        assert.not_error(f1(1, 'boolean', true))
        assert.not_error(f1(1, 'thread', coroutine.create(function() end)))
        assert.not_error(f1(1, 'function', function() end))
        assert.not_error(f1(1, 'file', io.stderr))
        assert.not_error(f1(1, 'number', 1.337e3))
        assert.not_error(f1(1, 'string', "a string"))
        assert.not_error(f1(1, 'table', {}))
        assert.not_error(f1(1, 'userdata', io.stderr))
      end)
      it("matches optional types", function()
        assert.not_error(f1(1, '?boolean', nil))
        assert.not_error(f1(1, '?thread', nil))
        assert.not_error(f1(1, '?function', nil))
        assert.not_error(f1(1, '?file', nil))
        assert.not_error(f1(1, '?number', nil))
        assert.not_error(f1(1, '?string', nil))
        assert.not_error(f1(1, '?table', nil))
        assert.not_error(f1(1, '?userdata', nil))
      end)
      it("matches complementary types", function()
        assert.not_error(f1(1, '!boolean', nil))
        assert.not_error(f1(1, '!thread', nil))
        assert.not_error(f1(1, '!function', nil))
        assert.not_error(f1(1, '!file', nil))
        assert.not_error(f1(1, '!number', nil))
        assert.not_error(f1(1, '!string', nil))
        assert.not_error(f1(1, '!table', nil))
        assert.not_error(f1(1, '!userdata', nil))
      end)
      it("reports mismatched complementary types", function()
        assert.error(f1(1, '!boolean', true), "bad argument #1 to 'f' (not boolean expected, got boolean)")
        assert.error(f1(1, '!thread', coroutine.create(function() end)), "bad argument #1 to 'f' (not thread expected, got thread)")
        assert.error(f1(1, '!function', function() end), "bad argument #1 to 'f' (not function expected, got function)")
        assert.error(f1(1, '!file', io.stderr), "bad argument #1 to 'f' (not file expected, got file)")
        assert.error(f1(1, '!number', 1.337e3), "bad argument #1 to 'f' (not number expected, got number)")
        assert.error(f1(1, '!string', "a string"), "bad argument #1 to 'f' (not string expected, got string)")
        assert.error(f1(1, '!table', {}), "bad argument #1 to 'f' (not table expected, got table)")
        assert.error(f1(1, '!userdata', io.stderr), "bad argument #1 to 'f' (not userdata expected, got userdata)")
      end)
      it("reports multiple mismatched complementary types", function()
        assert.error(f1(1, '!boolean|string', true), "bad argument #1 to 'f' (not boolean, or string expected, got boolean)")
        assert.error(f1(1, '!boolean|string|table', true), "bad argument #1 to 'f' (not boolean, string, or table expected, got boolean)")
      end)
    end)
    describe("with integer type", function()
      it("reports missing arguments", function()
        assert.error(f1(1, 'integer'), "bad argument #1 to 'f' (integer expected, got nil)")
      end)
      it("reports mismatched types", function()
        assert.error(f1(1, 'integer', {1337}), "bad argument #1 to 'f' (integer expected, got table)")
        assert.error(f1(1, 'integer', 1.337), "bad argument #1 to 'f' (integer expected, got number)")
        assert.error(f1(1, 'integer', 1.337e3), "bad argument #1 to 'f' (integer expected, got number)")
      end)
      it("matches types", function()
        assert.not_error(f1(1, 'integer', 1337))
      end)
      it("matches optional types", function()
        assert.not_error(f1(1, '?integer', nil))
      end)
    end)
    describe("with enum types", function()
      it("reports missing arguments", function()
        assert.error(f1(1, ':one'), "bad argument #1 to 'f' (:one expected, got nil)")
        assert.error(f1(1, ':one|:two'), "bad argument #1 to 'f' (:one, or :two expected, got nil)")
      end)
      it("reports mismatched types", function()
        assert.error(f1(1, ':one', 'string'), "bad argument #1 to 'f' (:one expected, got string)")
        assert.error(f1(1, ':one', ':two'), "bad argument #1 to 'f' (:one expected, got :two)")
        assert.error(f1(1, ':one', 1337), "bad argument #1 to 'f' (:one expected, got number)")
      end)
      it("matches types", function()
        assert.not_error(f1(1, ':one|:two', ':one'))
        assert.not_error(f1(1, ':one|:two', ':two'))
      end)
    end)
    describe("with named types", function()
      local foo = setmetatable({}, { __name = "foo" })
      local goo = setmetatable({}, { __name = "goo" })
      it("reports missing arguments", function()
        assert.error(f1(1, 'foo'), "bad argument #1 to 'f' (foo expected, got nil)")
      end)
      it("report mismatiching types", function()
        assert.error(f1(1, 'foo', {}), "bad argument #1 to 'f' (foo expected, got table)")
        assert.error(f1(1, 'foo', 1337), "bad argument #1 to 'f' (foo expected, got number)")
        assert.error(f1(1, 'foo', goo), "bad argument #1 to 'f' (foo expected, got table)")
      end)
      it("matches types", function()
        assert.not_error(f1(1, 'foo|goo', foo));
        assert.not_error(f1(1, 'foo|goo', goo));
      end)
    end)
    describe("blame site", function()
      it("blames the call site", function()
        assert.matches(":5: bad argument #1 to", blame('checktype(1, "integer")'))
      end)
    end)
  end)
end)
